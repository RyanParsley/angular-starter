define(["source/adapter", "spec/support/helper"], function (Adapter, helper) {
  describe("Adapter()", function () {
    var adapter, templateLoader, cucumberRunner;

    beforeEach(function () {
      Adapter.window = helper.createSpyWithStubs("window", {});
      Adapter.karma = helper.createSpyWithStubs("karma", {loaded: null, start: null});

      Adapter.TemplateLoader = helper.createSpyWithStubs("TemplateLoader", {});
      templateLoader = helper.createSpyWithStubs("template loader", {loadHtml: null});
      Adapter.TemplateLoader.andReturn(templateLoader);

      Adapter.CucumberRunner = helper.createSpyWithStubs("CucumberRunner", {});
      cucumberRunner = helper.createSpyWithStubs("cucumber runner", {initialize: null});
      Adapter.CucumberRunner.andReturn(cucumberRunner);

      adapter = Adapter();
    });

    describe("constructor", function () {
      it("sets the karma start function to the adapter's start function", function () {
        expect(Adapter.karma.start).toBe(adapter.start);
      });

      it("creates a global dump function on the window object", function () {
        expect(Adapter.window.dump).toBe(adapter.dump);
      });

      it("creates the TemplateLoader", function () {
        expect(Adapter.TemplateLoader).toHaveBeenCalledWith(Adapter.karma, Adapter.window);
      });

      it("creates a CucumberRunner", function () {
        expect(Adapter.CucumberRunner).toHaveBeenCalledWith(Adapter.karma, Adapter.window);
      });
    });


    describe("dump()", function () {
      var value, angular;

      beforeEach(function () {
        value = "a value to dump";
        spyOn(adapter, "isAngularMockDumpAvailable");
      });

      it("checks if there is an angular mock dump function available", function () {
        adapter.dump(value);

        expect(adapter.isAngularMockDumpAvailable).toHaveBeenCalled();
      });

      describe("when the angular mock dump is available", function () {
        beforeEach(function () {
          angular = {};
          angular.mock = helper.createSpyWithStubs("mock", {dump: null});
          Adapter.window.angular = angular;
          adapter.isAngularMockDumpAvailable.andReturn(true);
        });

        it("returns the value generated by the dump function", function () {
          var dumpFunctionReturn = "return from dump function";
          angular.mock.dump.andReturn(dumpFunctionReturn);

          var result = adapter.dump(value);

          expect(result).toBe(dumpFunctionReturn);
        });
      });

      describe("when the angular mock dump is not available", function () {
        beforeEach(function () {
          adapter.isAngularMockDumpAvailable.andReturn(false);
        });

        it("doesn't try to run the dump function", function () {
          adapter.dump(value);

          expect(function () {
            adapter.dump(value);
          }).not.toThrow();
        });

        it("returns the raw value", function () {
          var result = adapter.dump(value);

          expect(result).toBe(value);
        });
      });
    });

    describe("isAngularMockDumpAvailable()", function () {
      var angular;

      beforeEach(function () {
        angular = null;
      });

      describe("when there is an angular object with mocks available and a dump function", function () {
        beforeEach(function () {
          angular = {};
          angular.mock = helper.createSpyWithStubs("mock", {dump: null});
          Adapter.window.angular = angular;
        });

        it("returns true", function () {
          expect(adapter.isAngularMockDumpAvailable()).toBe(true);
        });
      });

      describe("when there is an angular object with mocks available but no dump function", function () {
        beforeEach(function () {
          angular = {};
          angular.mock = helper.createSpyWithStubs("mock", {});
          Adapter.window.angular = angular;
        });

        it("returns false", function () {
          expect(adapter.isAngularMockDumpAvailable()).toBe(false);
        });
      });

      describe("when there is an angular object with no mocks object available", function () {
        beforeEach(function () {
          angular = {};
          Adapter.window.angular = angular;
        });

        it("returns false", function () {
          expect(adapter.isAngularMockDumpAvailable()).toBe(false);
        });
      });

      describe("when there is no angular object available", function () {
        beforeEach(function () {
          Adapter.window = {};
        });

        it("returns false", function () {
          expect(adapter.isAngularMockDumpAvailable()).toBe(false);
        });
      });
    });

    describe("start()", function () {
      it("loads the Cucumber runner HTML template into the captured browser", function () {
        adapter.start();

        expect(templateLoader.loadHtml).toHaveBeenCalled();
      });

      it("starts the Cucumber test run", function () {
        adapter.start();

        expect(cucumberRunner.initialize).toHaveBeenCalled();
      });
    });
  });
});