{
  "name": "phantomcss",
  "version": "0.9.1",
  "description": "A CasperJS module for automating visual regression testing of Web apps, live style guides and responsive layouts.",
  "repository": {
    "type": "git",
    "url": "https://github.com/Huddle/PhantomCSS.git"
  },
  "main": "phantomcss.js",
  "keywords": [
    "css",
    "phantomjs",
    "casperjs",
    "testing",
    "visual regression",
    "responsive"
  ],
  "author": {
    "name": "James Cryer / Huddle"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/Huddle/PhantomCSS/issues"
  },
  "dependencies": {
    "phantomjs": "1.9.7-14",
    "casperjs": "~1.1.0-beta3",
    "resemblejs": "~1.2.0"
  },
  "readme": "**Huddle is Hiring!** We're always looking for talented Developers and Test Engineers. Visit http://www.huddle.com/careers for open vacancies now, or register your interest for the future.\n\nPhantomCSS\n==========\n\n**CSS regression testing**. A [CasperJS](http://github.com/n1k0/casperjs) module for automating visual regression testing with [PhantomJS](http://github.com/ariya/phantomjs/) and [Resemble.js](http://huddle.github.com/Resemble.js/). For testing Web apps, live style guides and responsive layouts. Read more on Huddle's Engineering blog: [CSS Regression Testing](http://tldr.huddle.com/blog/css-testing/).\n\n### What?\n\nPhantomCSS takes screenshots captured by CasperJS and compares them to baseline images using [Resemble.js](http://huddle.github.com/Resemble.js/) to test for rgb pixel differences. PhantomCSS then generates image diffs to help you find the cause.\n\n![A failed visual regression test, pink areas show where padding has changed.](https://raw.github.com/Huddle/PhantomCSS/master/readme_assets/intro-example.png \"Failed visual regression test\")\n\nScreenshot based regression testing can only work when UI is predictable. It's possible to hide mutable UI components with PhantomCSS but it would be better to test static pages or drive the UI with faked data during test runs.\n\n### Example\n\n```javascript\ncasper.\n\tstart( url ).\n\tthen(function(){\n\t\t\n\t\t// do something\n\t\tcasper.click('button#open-dialog');\n\t\t\n\t\t// Take a screenshot of the UI component\n\t\tphantomcss.screenshot('#the-dialog', 'a screenshot of my dialog');\n\n\t});\n```\n\nFrom the command line/terminal run\n\n* `casperjs test demo/testsuite.js`\n\n### Download\n\n* `npm install phantomcss` (PhantomCSS is not itself a Node.js module)\n* `bower install phantomcss`\n* `git clone git://github.com/Huddle/PhantomCSS.git`\n\n### Getting started, try the demo\n\n* Mac OSX users should first [install CasperJS 1.1-beta](http://docs.casperjs.org/en/latest/installation.html), easiest with Homebrew.  For convenience I've included CasperJS.bat for Windows users.\n* Download or clone this repo and run `casperjs test demo/testsuite.js` in command/terminal from the PhantomCSS folder.  PhantomJS is the only binary dependency - this should just work\n* Find the screenshot folder and have a look at the (baseline) images\n* Run the tests again with `casperjs test demo/testsuite.js`. New screenshots will be created to compare against the baseline images. These new images can be ignored, they will be replaced every test run.\n* To test failure, add/change some CSS in the file demo/coffeemachine.html e.g. make `.mug` bright green\n* Run the tests again, you should see some reported failures\n* In the failures folder some images should have been created. The images should show bright pink where the screenshot has visually changed\n* If you want to manually compare the images, go to the screenshot folder to see the original/baseline and latest screenshots\n\n### Options and setup\n\n```javascript\nphantomcss.init({\n\t/*\n\t\tlibraryRoot is relative to this file and must point to your phantomcss folder (not lib or node_modules). If you are using NPM, this will be './node_modules/phantomcss'\n\t*/\n\tlibraryRoot: './modules/PhantomCSS',\n\t\n\tscreenshotRoot: './screenshots',\n\n\t/*\n\t\tBy default, failure images are put in the './failures' folder. If failedComparisonsRoot is set to false a separate folder will not be created but failure images can still be found alongside the original and new images.\n\t*/\n\tfailedComparisonsRoot: './failures',\n\n\t/*\n\t\tRemove results directory tree after run.  Use in conjunction with failedComparisonsRoot to see failed comparisons\n\t*/\n\tcleanupComparisonImages: true,\n\n\t/*\n\t\tYou might want to keep master/baseline images in a completely different folder to the diffs/failures.  Useful when working with version control systems. By default this resolves to the screenshotRoot folder.\n\t*/\n\tcomparisonResultRoot: './results',\n\n\t/*\n\t\tDon't add label to generated failure image\n\t*/\n\taddLabelToFailedImage: false,\n\n\t/*\n\t\tMismatch tolerance defaults to  0.05%. Increasing this value will decrease test coverage\n\t*/\n\tmismatchTolerance: 0.05,\n\n\t/*\n\t\tCallbacks for your specific integration\n\t*/\n\tonFail: function(test){ console.log(test.filename, test.mismatch); },\n\t\n\tonPass: function(test){ console.log(test.filename); },\n\t\n\t/* \n\t\tCalled when creating new baseline images\n\t*/\n\tonNewImage: function(){ console.log(test.filename); },\n\t\n\tonTimeout: function(){ console.log(test.filename); },\n\t\n\tonComplete: function(allTests, noOfFails, noOfErrors){\n\t\tallTests.forEach(function(test){\n\t\t\tif(test.fail){\n\t\t\t\tconsole.log(test.filename, test.mismatch);\n\t\t\t}\n\t\t});\n\t},\n\n\t/*\n\t\tChange the output screenshot filenames for your specific integration\n\t*/\n\tfileNameGetter: function(root,filename){ \n\t\t// globally override output filename\n\t\t// files must exist under root\n\t\t// and use the .diff convention\n\t\tvar name = root+'/somewhere/'+filename;\n\t\tif(fs.isFile(name+'.png')){\n\t\t\treturn name+'.diff.png';\n\t\t} else {\n\t\t\treturn name+'.png';\n\t\t}\n\t},\n\n\t/*\n\t\tOutput styles for image failure outputs genrated by Resemble.js\n\t*/\n\toutputSettings: {\n\t\terrorColor: {\n\t\t\tred: 255,\n\t\t\tgreen: 255,\n\t\t\tblue: 0\n\t\t},\n\t\terrorType: 'movement',\n\t\ttransparency: 0.3\n\t}\n});\n\n/*\n\tTurn off CSS transitions and jQuery animations\n*/\nphantomcss.turnOffAnimations();\n```\n\n### Don't like pink?\n\n![A failed visual regression test, yellow areas show where the icon has enlarged and pushed other elements down.](https://raw.github.com/Huddle/PhantomCSS/master/readme_assets/differentcolour.png \"Failed visual regression test\")\n\n```javascript\nphantomcss.init({\n\t/*\n\t\tOutput styles for image failure outputs genrated by Resemble.js\n\t*/\n\toutputSettings: {\n\n\t\t/*\n\t\t\tError pixel color, RGB, anything you want, \n\t\t\tthough bright and ugly works best!\n\t\t*/\n\t\terrorColor: {\n\t\t\tred: 255,\n\t\t\tgreen: 255,\n\t\t\tblue: 0\n\t\t},\n\t\t\n\t\t/*\n\t\t\tErrorType values include 'flat', or 'movement'.  \n\t\t\tThe latter merges error color with base image\n\t\t\twhich makes it a little easier to spot movement.\n\t\t*/\n\t\terrorType: 'movement',\n\t\t\n\t\t/*\n\t\t\tFade unchanged areas to make changed areas more apparent.\n\t\t*/\n\t\ttransparency: 0.3\n\t}\n});\n```\n\n### There are different ways to take a screenshot\n\n```javascript\nvar delay = 10;\nvar hideElements = 'input[type=file]';\nvar screenshotName = 'the_dialog'\n\nphantomcss.screenshot( \"#CSS .selector\", screenshotName);\n\n// phantomcss.screenshot({\n//  \t'Screenshot 1 File name': {selector: '.screenshot1', ignore: '.selector'},\n//  \t'Screenshot 2 File name': '#screenshot2'\n// });\n// phantomcss.screenshot( \"#CSS .selector\" );\n// phantomcss.screenshot( \"#CSS .selector\", delay, hideElements, screenshotName);\n\n// phantomcss.screenshot({\n//   top: 100,\n//   left: 100,\n//   width: 500,\n//   height: 400\n// }, screenshotName);\n```\n\n### Compare the images when and how you want\n\n```javascript\n/*\n\tString is converted into a Regular expression that matches on full image path\n*/\nphantomcss.compareAll('exclude.test'); \n\n// phantomcss.compareMatched('include.test', 'exclude.test');\n// phantomcss.compareMatched( new RegExp('include.test'), new RegExp('exclude.test'));\n\n/*\n\tCompare image diffs generated in this test run only\n*/\n// phantomcss.compareSession();\n\n/*\n\tExplicitly define what files you want to compare\n*/\n// phantomcss.compareExplicit(['/dialog.diff.png', '/header.diff.png']);\n\n/*\n\tGet a list of image diffs generated in this test run\n*/\n// phantomcss.getCreatedDiffFiles();\n\n/*\n\tCompare any two images, and wait for the results to complete\n*/\n// phantomcss.compareFiles(baseFile, diffFile);\n// phantomcss.waitForTests();\n\n```\n\n### Best Practices\n\n##### Name your screenshots!\n\nBy default PhantomCSS creates a file called screenshot_0.png, not very helpful.  You can name your screenshot by passing a string to either the second or forth parameter.\n\n```javascript\nvar delay, hideElementsSelector;\n\nphantomcss.screenshot(\"#feedback-form\", delay, hideElementsSelector, \"Responsive Feedback Form\");\n\nphantomcss.screenshot(\"#feedback-form\", \"Responsive Feedback Form\");\n\n```\n\nPerhaps a better way is to use the ‘fileNameGetter’ callback property on the ‘init’ method. This does involve having a bit more structure around your tests.  See: https://github.com/Huddle/PhantomFlow/blob/master/lib/phantomCSSAdaptor.js#L41\n\n##### CSS3 selectors for testing\n\nTry not to use complex CSS3 selectors for asserting or creating screenshots.  In the same way that CSS should be written with good content/container separation, so should your test selectors be agnostic of location/context.  This might mean you need to add more ID's or data- attributes into your mark-up, but it's worth it, your tests will be more stable and more explicit.\nThis is not a good idea:\n\n```javascript\nphantomcss.screenshot(\"#sidebar li:nth-child(3) > div form\");\n```\n\nBut this is:\n\n```javascript\nphantomcss.screenshot(\"#feedback-form\");\n```\n\n##### PhantomCSS should not be used to replace functional tests\n\nIf you needed functional tests before, then you still need them.  Automated visual regression testing gives us coverage of CSS and design in a way we didn't have before, but that doesn't mean that conventional test assertions are now invalid.  Feedback time is crucial with test automation, the longer it takes the easier it is to ignore; the easier it is to ignore the sooner trust is lost from the team.  Unfortunately comparing images is not, and never will be as fast as simple DOM assertion.\n\n##### Don't try to test all the visuals\n\nI'd argue this applies to all automated testing approaches.  As a rule, try to maximise coverage with fewer tests.  This is a difficult balancing act because granular feedback/reporting is very important for debugging and build analysis. Testing many things in one assert/screenshot might tell you there is a problem, but makes it harder to get to the root of the bug.  As a CSS/HTML Dev you'll know what components are more fragile than others, which are reused and which aren't, concentrate your visual tests on these areas.\n\n##### Full page screenshots are a bad idea\n\nIf you try to test too much in one screenshot then you could end up with lots of failing tests every time someone makes a small change.  Say you've set up full-page visual regression tests for your 50 page website, and someone adds 2px padding to the footer - that’s 50 failed tests because of one change.  It's better to test UI components individually; in this example the footer could have its own test.\nThere is also a technical problem with this approach, the larger the image, the longer it takes to process.  An added pixel padding on the page body will offset everything, at best you'll have a sea of pink in the failed diff, at worse you'll get a TIMEOUT because it took too long to analyse.\n\n##### Scaling visual regression testing within a large team\n\nScaling your test suite for many contributors may not be easy. [Resemble.js](http://huddle.github.com/Resemble.js/) (the core analysis engine of PhantomCSS) tries to consider image differences caused by different operating systems and graphics cards, but it's only so good, you are likely to see problems as more people contribute baseline screenshots.  You can mitigate this by hiding problematic elements such as select elements, file upload inputs etc. as so.\n\n```javascript\nphantomcss.screenshot(\"#feedback-form\", undefined, 'input[type=file]');\n```\n\nBelow is an example of a false-negative caused by antialiasing differences on different machines. How can we solve this?  **Contributions welcome!**\n\n![Three images: baseline, latests and diff where antialiasing has caused the failed diff](https://raw.github.com/Huddle/PhantomCSS/master/readme_assets/false-negative.png \"A False-negative?\")\n\n##### Scaling visual regression testing with Git\n\nIf your using a version control system like Git to store the baseline screenshots the repository size becomes increasingly relevant as your test suite grows.  I'd recommend using a tool like https://github.com/joeyh/git-annex or https://github.com/schacon/git-media to store the images outside of the repo.\n\n### ...You might also be interested in\n\n**[PhantomFlow](https://github.com/Huddle/PhantomFlow)** and **[grunt-phantomflow](https://github.com/Huddle/grunt-testflow)** wrap PhantomCSS and provides an experimental way of describing and visualising user flows through tests with CasperJS. As well as providing a terse readable structure for UI testing, it also produces intriguing graph visualisations that can be used to present PhantomCSS screenshots and failed diffs.  We're actively using it at Huddle and it's changing the way we think about UI for the better.\n\nAlso, take a look at [PhantomXHR](http://github.com/Huddle/PhantomXHR) for stubbing and mocking XHR requests. Isolated UI testing IS THE FUTURE!\n\n### Huddle Careers\n\nHuddle strongly believe in innovation and give you 20% of work time to spend on innovative projects of your choosing.\n\nIf you like what you see and would like to work on this kind of stuff for a job then get in touch.\n\nVisit http://www.huddle.com/careers for open vacancies now, or register your interest for the future.\n\n--------------------------------------\n\nPhantomCSS was created by [James Cryer](http://github.com/jamescryer) and the Huddle development team.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/Huddle/PhantomCSS",
  "_id": "phantomcss@0.9.1",
  "_from": "phantomcss@^0.9.1"
}
