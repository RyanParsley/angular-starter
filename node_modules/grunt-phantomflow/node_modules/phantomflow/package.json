{
  "name": "phantomflow",
  "version": "0.4.2",
  "description": "UI testing with PhantomCSS and Decision Trees",
  "main": "phantomflow.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/Huddle/PhantomFlow.git"
  },
  "keywords": [
    "decision",
    "casperjs",
    "phantomjs",
    "ui",
    "testing",
    "frontend",
    "tdd",
    "bdd",
    "phantomcss"
  ],
  "author": {
    "name": "James Cryer"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/Huddle/PhantomFlow/issues"
  },
  "homepage": "https://github.com/Huddle/PhantomFlow",
  "dependencies": {
    "glob": "~3.2.9",
    "wrench": "~1.5.8",
    "datauri": "~0.5.5",
    "open": "0.0.4",
    "connect": "~2.14.4",
    "colors": "~0.6.2",
    "lodash": "~2.4.1",
    "phantomcss": "~0.9.0",
    "async": "~0.8.0"
  },
  "devDependencies": {},
  "readme": "PhantomFlow\n===========\n\n**UI testing with decision trees**. An experimental approach to UI testing, based on [Decision Trees](http://en.wikipedia.org/wiki/Decision_tree). A NodeJS wrapper for [PhantomJS](http://github.com/ariya/phantomjs/), [CasperJS](http://github.com/n1k0/casperjs) and [PhantomCSS](http://github.com/Huddle/PhantomCSS), PhantomFlow enables a fluent way of describing user flows in code whilst generating [structured tree data](http://github.com/Huddle/PhantomFlow/tree/master/test-results/data/flows/coffeemachine.test.js/Get a coffee.json) for visualisation.\n\n![PhantomFlow Report: Test suite overview with radial Dendrogram and pie visualisation](https://raw.githubusercontent.com/Huddle/PhantomFlow/master/examplevis.png)\n\nIn the above image the left visualisation is the one generated by the example test suite (see below).  The right visualisation is a real-world example, as generated by a test suite at Huddle.\n\n### Aims\n\n* Enable a more expressive way of describing user interaction paths within tests\n* Fluently communicate UI complexity to stakeholders and team members through generated visualisations\n* Support TDD and BDD for web applications and responsive web sites\n* Provide a fast feedback loop for UI testing\n* Raise profile of visual regression testing\n\n### Install\n\n* Install with git `git clone https://github.com/Huddle/PhantomFlow.git` `cd phantomflow` `npm install`\n* As a NodeJS dependency `npm install phantomflow`\n\n### See also\n\nPhantomFlow also comes as grunt plugin! [grunt-phantomflow](http://github.com/Huddle/grunt-phantomflow)\n\n### Try it!\n\n* `node test/test.js` - First run will create visual test baslines with PhantomCSS\n* `node test/test.js` - Second run will compare baseline visuals with the latest screenshots. This'll pass because there have been no changes.\n* `node test/test.js report` - An optional step to load the Decision tree visualisation into your Web browser\n\nMac OSX users should be aware that PhantomJS doesn't load the FontAwesome glyths used in the test suite, I don't understand why.  I fixed this locally by downloading FontAwesome and double clicking on the .otf file to install the font.\n\nThere are two example test suites, these suites will be executed in parallel, the command line output is a bit muddled as a result.\n\nThe D3.js visualisation opens with a combined view which merges the test decision trees. Click on a branch label or use the dropdown to show a specific test. Hover over the nodes to see the PhantomCSS screenshots. If there is a visual test failure the node will glow red, hover and click the node to show the original, latest and generated diff screenshots.\n\n### Test Example\n\nThe [demo](http://github.com/Huddle/PhantomFlow/tree/master/test/flows/coffeemachine.test.js) describes a fictional Coffee machine application.\n\n```javascript\n\nflow(\"Get a coffee\", function(){\n\tstep(\"Go to the kitchen\", goToKitchen);\n\tstep(\"Go to the coffee machine\", goToMachine);\n\tdecision({\n\t\t\"Wants Latte\": function(){\n\t\t\tchance({\n\t\t\t\t\"There is no milk\": function(){\n\t\t\t\t\tstep(\"Request Latte\", requestLatte_fail);\n\t\t\t\t\tdecision({\n\t\t\t\t\t\t\"Give up\": function(){\n\t\t\t\t\t\t\tstep(\"Walk away from the coffee machine\", walkAway);\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"Wants Espresso instead\": wantsEspresso\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t\"There is milk\": function(){\n\t\t\t\t\tstep(\"Request Latte\", requestLatte_success);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\"Wants Cappuccino\": function(){\n\t\t\tchance({\n\t\t\t\t\"There is no milk\": function(){\n\t\t\t\t\tstep(\"Request Cappuccino\", requestCappuccino_fail);\n\t\t\t\t\tdecision({\n\t\t\t\t\t\t\"Request Espresso instead\": wantsEspresso\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t\"There is milk\": function(){\n\t\t\t\t\tstep(\"Request Cappuccino\", requestCappuccino_success);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\"Wants Espresso\": wantsEspresso\n\t});\n});\n\n```\n\nAnd below is the visualisation generated by this simple feature test.\n\n![PhantomFlow Report: Feature test visualisation as tree Dendrogram](https://raw.githubusercontent.com/Huddle/PhantomFlow/master/exampletreevis.png)\n\n### The visualisations\n\nDeciding how to visualise this data is the hard part.  It has to be readable and insightful. These visualisations are still evolving, it would be great to see contributions for better visualisations. Visit [d3js.org](http://d3js.org/) for inspiration.\n\n### PhantomFlow methods\n\n* flow (string, callback) : initialise a test suite with a name, and a function that contains Steps, Chances and Decisions\n* step (string, callback) : a discrete step, with a name and a callback that can contain a PhantomCSS screenshot as well as CasperJS events and asserts.\n* decision (object) : Defines a user decision.  It takes an object with key value pairs, where the key is the label for a particular decision, and the value is the function to be executed.  The function can contains further decisions, chances and steps\n* chance (object) : The same as a decision but offers the semantic representation of a chance event, as opposed to a deliberate possible action by the user\n\n### NodeJS setup example\n\n```javascript\n\tvar flow = require('../phantomflow').init({\n\t\t// debug: 2\n\t\t// createReport: true,\n\t\t// test: 'coffee'\n\t});\n\n\t// flow.report(); // Show report\n\n\tflow.run(function(code){\n\t\tprocess.exit(code); // callback is executed when PhantomFlow is complete\n\t});\t\n\n```\n\n### NodeJs Methods\n\n* run (callback) : Runs all the tests.  Takes a callback which is executed when complete\n* report () : Spins up a local connect server and loads a browser window with the visualisation generated on the last test run.\n\n### Options\n\n* createReport (boolean) : Should a report/visualisation be built?\n* debug (number) : A value of 1 will output more logging, 2 will generate full page screenshots per test which can be found in the test-results folder.  Forces tests onto one thread for readability.\n* earlyexit (boolean) : False by default, if set to true all tests will abort on the first failure\n* includes (string) : Defaults to 'include', it is the root directory of custom global includes (within the PhantomJS domain)\n* port (number) : Defaults to 9001, this is the port that will be used to show the report/visualisation\n* results (string) : Defaults to 'test-results', it is the root directory of the test results\n* remoteDebug (boolean) : Enable PhantomJS remote debugging\n* remoteDebugAutoStart (boolean) : Enable autostart for PhantomJS remote debugging\n* remoteDebugPort (number) : Defaults to 9000, the port on which Web Inspector will run\n* skipVisualTests (boolean) : If set to true the visual comparison step will not be run\n* test (string) : Test run filtering with a substring match\n* tests (string) : Defaults to 'test', it is the root directory of your tests \n* threads (number) : How many processes do you think you can parallelise your tests on.  Defaults to 4.\n\n### Parallelisation\n\nTest execution is parallelised for increased speed and a reduced test to dev feedback loop. By default your tests will be divided and run on up to 4 spawned processes.  You can change the default number of threads to any number you think your machine can handle.\n\n### Debugging\n\nDebugging is often a painful part of writing tests with PhantomJS.  If you're experiencing trouble try the following.\n\n* Enable debug mode 1, to show more logging.  This will also prevent parallelisation - better for readability, but slower.\n```javascript\n\tvar flow = require('../phantomflow').init({\n\t\tdebug: 1\n\t});\n```\n\n* Enable debug mode 2, same as mode 1 but will also generate full-page screenshots per step, to allow to see what's actualy going on.\n```javascript\n\tvar flow = require('../phantomflow').init({\n\t\tdebug: 2\n\t});\n```\n\n* PhantomJS provides [remote debugging](https://github.com/ariya/phantomjs/wiki/Troubleshooting#remote-debugging) functionality.  This setting allows you to use the debugger; statement and add breakpoints with the [Web Inspector interface](https://www.webkit.org/blog/1620/webkit-remote-debugging/).  Remote debugging can be use in conjunction with the debug modes described above.\n\n```javascript\n\tvar flow = require('../phantomflow').init({\n\t\tremoteDebug: true\n\t\t// remoteDebugAutoStart: false\n\t\t// remoteDebugPort: 9000\n\t});\n```\n\n### What next?\n\nWe've been using this testing style for many months on Huddle's biggest UI application. It's still an evolving idea but for those of us that actively worked on it, it's making a huge difference to the way we think about UI, and how we communicate about UI. It supports TDD well, we use it for 'unit' testing UI but it has great potential for end-to-end as well. I'd also like to do more work on the visualisations, they look great and are very communicable, but they could be a lot better.  Of course, this is an Open Source project and it would be great to see contributions.\n\n--------------------------------------\n\nCreated by [James Cryer](http://github.com/jamescryer) and the Huddle development team.\n",
  "readmeFilename": "README.md",
  "_id": "phantomflow@0.4.2",
  "_from": "phantomflow@~0.4.0"
}
