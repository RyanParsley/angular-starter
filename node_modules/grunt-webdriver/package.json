{
  "name": "grunt-webdriver",
  "description": "grunt-webdriver is a grunt plugin to run selenium tests with Mocha and WebdriverIO",
  "version": "0.4.8",
  "homepage": "https://github.com/webdriverio/grunt-webdriver",
  "author": {
    "name": "Christian Bromann",
    "email": "contact@christian-bromann.com",
    "url": "http://www.christian-bromann.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/webdriverio/grunt-webdriver.git"
  },
  "bugs": {
    "url": "https://github.com/webdriverio/grunt-webdriver/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/webdriverio/grunt-webdriver/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "travis": "grunt testTravis --debug",
    "test": "grunt test --debug"
  },
  "dependencies": {
    "async": "^0.7.0",
    "mocha": "^1.18.0",
    "webdriverio": "^2.3.0",
    "saucelabs": "^0.1.1",
    "sauce-tunnel": "^2.0.1",
    "selenium-standalone": "^2.41.0-2.9.0-1",
    "deepmerge": "^0.2.7",
    "hooker": "^0.2.3",
    "path": "^0.4.9",
    "fs-extra": "^0.8.1"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "^0.10.0",
    "grunt": "^0.4.2"
  },
  "peerDependencies": {
    "grunt": "~0.4.2"
  },
  "keywords": [
    "grunt",
    "webdriverjs",
    "webdriverio",
    "webdriver",
    "selenium",
    "mocha",
    "bdd",
    "tdd",
    "saucelabs",
    "gruntplugin"
  ],
  "readme": "# grunt-webdriver [![Build Status](https://travis-ci.org/webdriverio/grunt-webdriver.png)](https://travis-ci.org/webdriverio/grunt-webdriver)\n\n> grunt-webdriver is a grunt plugin to run selenium tests with Mocha and [WebdriverIO](http://webdriver.io)\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out\nthe [Getting Started](http://gruntjs.com/getting-started) guide, as it explains\nhow to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as\ninstall and use Grunt plugins. Once you're familiar with that process, you may\ninstall this plugin with this command:\n\n```shell\nnpm install grunt-webdriver --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile\nwith this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-webdriver');\n```\n\n## The \"webdriver\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `webdriver` to the data\nobject passed into `grunt.initConfig()`.\n\n_Run this task with the `grunt webdriver` command._\n\n```js\ngrunt.initConfig({\n  webdriver: {\n    options: {\n        desiredCapabilities: {\n            browserName: 'chrome'\n        }\n    },\n    login: {\n        tests: ['test/spec/login/*.js'],\n        options: {\n            // overwrite default settings\n            desiredCapabilities: {\n                browserName: 'firefox'\n            }\n        }\n    },\n    form: {\n        tests: ['test/spec/form/*.js']\n    }\n    // ...\n  },\n})\n```\n\n#### example using [Sauce Labs](https://saucelabs.com)\n\nIf you specify a `tunnel-identifier` within your `desiredCapabilities` object, the task\nwill automatically try to establish a tunnel connection via [Sauce Connect](https://saucelabs.com/docs/connect).\n\n```js\ngrunt.initConfig({\n  webdriver: {\n    options: {\n        host: 'ondemand.saucelabs.com',\n        port: 80,\n        user: SAUCE_USERNAME,\n        key: SAUCE_ACCESS_KEY,\n        desiredCapabilities: {\n            browserName: 'chrome',\n            version: '27',\n            platform: 'XP',\n            'tunnel-identifier': 'my-tunnel'\n        }\n    },\n    login: {\n        tests: ['test/spec/login/*.js']\n    },\n    form: {\n        tests: ['test/spec/form/*.js']\n    }\n    // ...\n  },\n})\n```\n\n### Options\n\nAll options get passed into the WebdriverIO `remote` function. So this is the place where\nyou can define your driver instance. You'll find more informations about all WebdriverIO\noptions [here](https://github.com/webdriverio/webdriverio#options). You can overwrite these\noptions in any target. Also you have to define all Mocha options here. The following\nare supported:\n\n#### bail\nType: `Boolean`<br>\nDefault: *false*<br>\n\nIf true you are only interested in the first execption\n\n#### ui\nType: `String`<br>\nDefault: *bdd*<br>\nOptions: *bdd* | *tdd* | *qunit* | *exports*\n\nSpecify the interface to use.\n\n#### reporter\nType: `String`<br>\nDefault: *spec*<br>\nOptions: *Base* | *Dot* | *Doc* | *TAP* | *JSON* | *HTML* | *List* | *Min* | *Spec* | *Nyan* | *XUnit* | *Markdown* | *Progress* | *Landing* | *JSONCov* | *HTMLCov* | *JSONStream*\n\nAllows you to specify the reporter that will be used.\n\n#### slow\nType: `Number`<br>\nDefault: *75*\n\nSpecify the \"slow\" test threshold, defaulting to 75ms. Mocha uses this to highlight test-cases that are taking too long.\n\n#### timeout\nType: `Number`<br>\nDefault: *1000000*\n\nSpecifies the test-case timeout.\n\n#### grep\nType: `String`\n\nWhen specified will trigger mocha to only run tests matching the given pattern which is internally compiled to a `RegExp`.\n\n#### updateSauceJob\nType: `Boolean`<br>\nDefault: *false*\n\nIf true it will automatically update the current job and does publish it.\n\n#### output\nType: `String`\nDefault: *null*\n\nIf set grunt-webdriver will pipe reporter output into given file path\n\n#### quiet\nType: `Boolean`\nDefault: *false*\n\nIf true it prevents the original process.stdout.write from executing - no output at all\n\n#### nospawn\nType: `Boolean`<br>\nDefault: *false*\n\nIf true it will not spawn a new selenium server process (useful if you use Sauce Labs without Sauce Tunnel)\n\n### Usage Examples\n\n#### Required Options\nIn this example, the minimum required options are used to execute a simple\ntest script.\n\n```js\ngrunt.initConfig({\n  webdriver: {\n    githubTest: {\n      tests: './test/github-test.js'\n    }\n  },\n})\n```\n\nThe corresponding *Hello World* test script is using WebdriverIO API to search the\ngrunt-webdriver repository on GitHub. The global `browser` variable lets you access\nyour client instance. See more functions and test examples in the [WebdriverIO](https://github.com/webdriverio/webdriverio) repository.\n\n```js\n'use strict';\n\nvar assert = require('assert');\n\ndescribe('grunt-webdriver test', function () {\n\n    it('checks if title contains the search query', function(done) {\n\n        browser\n            .url('http://github.com')\n            .setValue('#js-command-bar-field','grunt-webdriver')\n            .submitForm('.command-bar-form')\n            .getTitle(function(err,title) {\n                assert(title.indexOf('grunt-webdriver') !== -1);\n            })\n            .call(done);\n\n    });\n\n});\n```\n\n#### Using CoffeeScript\n\nIf you like to write your tests in CoffeeScript just add the following on the top of your Gruntfile\nand you are set.\n\n```js\nrequire('coffee-script/register');\n\nmodule.exports = function(grunt) {\n    // Project configuration.\n    grunt.initConfig({\n        // ...\n    });\n}\n```\n\n## Contributing\nPlease fork, add specs, and send pull requests! In lieu of a formal styleguide, take care to\nmaintain the existing coding style.\n\n## Release History\n* 2013-03-13   v0.1.1   first working version, without special features\n* 2013-03-14   v0.1.2   bugfixing, enhanced task option, improved test case\n* 2013-03-15   v0.1.3   added support for phantomjs, implemented reporter option\n* 2013-03-16   v0.1.4   save result of busterjs reporters to a file, use travis for CI testing\n* 2013-03-16   v0.1.5   added support for setUp function\n* 2013-03-16   v0.1.6   fixed WebdriverJS version\n* 2014-02-01   v0.2.0   rewrote plugin, replaced BusterJS with Mocha\n* 2014-03-13   v0.3.0   support Sauce Connect\n* 2014-03-16   v0.3.1   start selenium server and Sauce Connect tunnel only once\n* 2014-03-22   v0.3.2   make task work with absolute minimum required options - closes [#11](https://github.com/webdriverio/grunt-webdriver/issues/11)\n* 2014-03-13   v0.3.3   updated version of WebdriverJS\n* 2014-03-13   v0.4.0   pipe reporter output into file, expose flag to prevent spawing of selenium process\n* 2014-05-23   v0.4.1   updated dependencies\n* 2014-08-17   v0.4.2   updated webdriverjs dependencies\n* 2014-08-17   v0.4.3   fixed broke v0.4.3 version\n* 2014-09-18   v0.4.4   selenium server outputs log on stderr, implemented workaround\n* 2014-11-27   v0.4.5   Updated WebdriverIO package version, smaller bugfixes regarding file output\n* 2014-11-27   v0.4.6   Additional bugfixes\n* 2014-11-27   v0.4.7   check isLastTask properly\n* 2014-11-27   v0.4.8   bugfix",
  "readmeFilename": "README.md",
  "_id": "grunt-webdriver@0.4.8",
  "_from": "grunt-webdriver@^0.4.8"
}
