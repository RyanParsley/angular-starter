{
  "name": "webdriverio",
  "description": "A nodejs bindings implementation for selenium 2.0/webdriver",
  "version": "2.4.0",
  "homepage": "http://webdriver.io",
  "author": {
    "name": "Camilo Tapia",
    "email": "camilo.tapia@gmail.com"
  },
  "contributors": [
    {
      "name": "Dan Jenkins",
      "email": "dan.jenkins@holidayextras.com"
    },
    {
      "name": "Christian Bromann",
      "email": "mail@christian-bromann.com"
    },
    {
      "name": "Vincent Voyer",
      "email": "vincent@zeroload.net"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/webdriverio/webdriverio.git"
  },
  "bugs": {
    "url": "https://github.com/webdriverio/webdriverio/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/webdriverio/webdriverio/blob/master/LICENSE-MIT"
    }
  ],
  "main": "./index.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "node ./test/runner.js",
    "test-mobile": "_APP=safari _BROWSER=safari _PLATFORMVERSION=7.1 _APPIUMVERSION=1.2 _PLATFORMNAME=iOS _DEVICENAME=iPhone_Simulator _PORT=4723 _ENV=mobile node ./test/runner.js",
    "test-desktop": "_ENV=desktop _BROWSER=chrome node ./test/runner.js",
    "test-functional": "_ENV=functional _BROWSER=phantomjs node ./test/runner.js",
    "coverage": "istanbul cover -x \"**/helpers/_*.js\" ./test/runner.js",
    "prepublish": "npm prune"
  },
  "dependencies": {
    "archiver": "~0.6.1",
    "async": "^0.9.0",
    "chainit": "^2.1.1",
    "css-parse": "^1.7.0",
    "css-value": "0.0.1",
    "deepmerge": "~0.2.7",
    "pragma-singleton": "~1.0.3",
    "q": "^1.1.2",
    "request": "~2.34.0",
    "rgb2hex": "^0.1.0",
    "url": "^0.10.1",
    "wgxpath": "^0.23.0"
  },
  "devDependencies": {
    "chai": "~1.9.0",
    "coveralls": "~2.8.0",
    "glob": "~3.2.7",
    "istanbul": "^0.2.6",
    "jshint": "~2.4.1",
    "mocha": "^2.0.1",
    "nock": "~0.27.1",
    "saucelabs": "~0.1.1",
    "should": "^3.3.2"
  },
  "tags": [
    "web",
    "test",
    "selenium",
    "browser",
    "javascript"
  ],
  "keywords": [
    "webdriverio",
    "webdriver",
    "selenium",
    "appium",
    "saucelabs",
    "sauce",
    "labs",
    "mocha",
    "nodeUnit",
    "buster",
    "phantomjs",
    "chai",
    "vows",
    "jasmine",
    "assert",
    "cucumber",
    "testingbot"
  ],
  "readme": "WebdriverIO [![Build Status](https://travis-ci.org/webdriverio/webdriverio.png?branch=master)](https://travis-ci.org/webdriverio/webdriverio) [![Coverage Status](https://coveralls.io/repos/webdriverio/webdriverio/badge.png?branch=master&)](https://coveralls.io/r/webdriverio/webdriverio?branch=master)\n===========\n\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/webdriverio.svg)](https://saucelabs.com/u/webdriverio)\n\nThis library is a webdriver module for Node.js. It makes it possible to write\nsuper easy selenium tests in your favorite BDD or TDD test framework. It was\noriginated by [Camilo Tapia's](https://github.com/camme) inital selenium project\ncalled WebdriverJS.\n\nHave a look at the many [examples](examples/).\n\nFor news or announcements follow [@webdriverio](https://twitter.com/WebdriverIO) on Twitter.\n\n## How to install it\n\n```shell\nnpm install webdriverio\n```\n\n## Usage\n\nMake sure you have a running Selenium standalone/grid/hub. Or use [selenium-standalone](https://github.com/vvo/selenium-standalone)\npackage to run one easily.\n\nOnce you initialized your WebdriverIO instance you can chain all available [protocol and action commands](http://webdriver.io/api.html)\nto execute asynchronous requests sequentially. WebdriverIO supports callback and promise based chaining. You can\neither pass a callback as last parameter to handle with the command results:\n\n```js\nvar webdriverio = require('../index');\nvar options = {\n    desiredCapabilities: {\n        browserName: 'chrome'\n    }\n};\n\nwebdriverio\n    .remote(options)\n    .init()\n    .url('http://www.google.com')\n    .getTitle(function(err, title) {\n        console.log('Title was: ' + title);\n    })\n    .end();\n```\n\nor you can handle it like a A+ promise:\n\n```js\nwebdriverio\n    .remote(options)\n    .init()\n    .url('http://www.google.com')\n    .getTitle()\n        .then(function(title) {\n            console.log('Title was: ' + title);\n        })\n        .reject(function(error) {\n            console.log('uups something went wrong', error);\n        })\n    .end();\n```\n\nUsing promised based assertion libraries like [chai-as-promised](https://github.com/domenic/chai-as-promised/) it\nmakes functional testing with WebdriverIO super easy. No nested callbacks anymore! No confusion whether to use\ncallbacks or promises!\n\n```js\ndescribe('example page', function() {\n\n    before(function() {\n        return client.init().url('http://example.com');\n    });\n\n    it('should display right title and #someElem', function() {\n        return client.getTitle().should.become('Example Title')\n                     .isVisible('#someElem').should.eventually.be.true;\n    });\n\n    after(function() {\n        return client.end();\n    });\n\n});\n```\n\n## Options\n\n### desiredCapabilities\nType: `Object`<br>\n\n**Example:**\n\n```js\nbrowserName: 'chrome',  // options: firefox, chrome, opera, safari\nversion: '27.0',        // browser version\nplatform: 'XP',         // OS platform\ntags: ['tag1','tag2'],  // specify some tags (e.g. if you use Sauce Labs)\nname: 'my test'         // set name for test (e.g. if you use Sauce Labs)\n```\n\nSee the [Selenium documentation](https://code.google.com/p/selenium/wiki/DesiredCapabilities) for a list of the available `capabilities`.\n\n### logLevel\nType: `String`\n\nDefault: *silent*\n\nOptions: *verbose* | *silent* | *command* | *data* | *result*\n\n### screenshotPath\nSaves a screenshot to a given path if Selenium driver crashes\n\nType: `String`|`null`\n\nDefault: *null*\n\n### singleton\n\nType: `Boolean`\n\nDefault: *false*\n\nSet to true if you always want to reuse the same remote\n\n### waitforTimeout\n\nType: `Number`\n\nDefault: *500*\n\nDefault timeout for all waitForXXX commands\n\n## Selector API\n\nThe JsonWireProtocol provides several strategies to query an element. WebdriverIO simplifies these\nto make it more familiar with the common existing selector libraries like [Sizzle](http://sizzlejs.com/).\nThe following selector types are supported:\n\n- **CSS query selector**<br>\n  e.g. `client.click('h2.subheading a', function(err,res) {...})` etc.\n- **link text**<br>\n  To get an anchor element with a specific text in it (f.i. `<a href=\"http://webdriver.io\">WebdriverIO</a>`)\n  query the text starting with an equal (=) sign. In this example use `=WebdriverIO`\n- **partial link text**<br>\n  To find a anchor element whose visible text partially matches your search value, query it by using `*=`\n  in front of the query string (e.g. `*=driver`)\n- **tag name**<br>\n  To query an element with a specific tag name use `<tag>` or `<tag />`\n- **name attribute**<br>\n  For quering elements with a specific name attribute you can eather use a normal CSS3 selector or the\n  provided name strategy from the JsonWireProtocol by passing something like `[name=\"some-name\"]` as\n  selector parameter\n- **xPath**<br>\n  It is also possible to query elements via a specific xPath. The selector has to have a format like\n  for example `//BODY/DIV[6]/DIV[1]/SPAN[1]`\n\nIn near future WebdriverIO will cover more selector features like form selector (e.g. `:password`,`:file` etc)\nor positional selectors like `:first` or `:nth`.\n\n## List of current commands methods\n\nTo see the full list of available commands check out the [WebdriverIO API](http://webdriver.io/api.html).\n\n## Eventhandling\n\nWebdriverIO inherits several function from the NodeJS [EventEmitter](http://nodejs.org/api/events.html) object.\nAdditionally it provides an experimental way to register events on browser side (like click,\nfocus, keypress etc.).\n\n#### Eventhandling\n\nThe following functions are supported: `on`,`once`,`emit`,`removeListener`,`removeAllListeners`.\nThey behave exactly as described in the official NodeJS [docs](http://nodejs.org/api/events.html).\nThere are some predefined events (`error`,`init`,`end`, `command`) which cover important\nWebdriverIO events.\n\n**Example:**\n\n```js\nclient.on('error', function(e) {\n    // will be executed everytime an error occured\n    // e.g. when element couldn't be found\n    console.log(e.body.value.class);   // -> \"org.openqa.selenium.NoSuchElementException\"\n    console.log(e.body.value.message); // -> \"no such element ...\"\n})\n```\n\nAll commands are chainable, so you can use them while chaining your commands\n\n```js\nvar cnt;\n\nclient\n    .init()\n    .once('countme', function(e) {\n        console.log(e.elements.length, 'elements were found');\n    })\n    .elements('.myElem', function(err,res) {\n        cnt = res.value;\n    })\n    .emit('countme', cnt)\n    .end();\n```\n\n**Note:** make sure you check out the [Browserevent](https://github.com/webdriverio/browserevent) side project\nthat enables event-handling on client side (Yes, in the browser!! ;-).\n\n## Adding custom commands\n\nIf you want to extend the client with your own set of commands there is a\nmethod called `addCommand` available from the client object:\n\n```js\nvar client = require(\"webdriverio\").remote();\n\n// example: create a command the returns the current url and title as one result\n// last parameter has to be a callback function that needs to be called\n// when the command has finished (otherwise the queue stops)\nclient.addCommand(\"getUrlAndTitle\", function(customVar, cb) {\n    this.url(function(err,urlResult) {\n        this.getTitle(function(err,titleResult) {\n            var specialResult = {url: urlResult.value, title: titleResult};\n            cb(err,specialResult);\n            console.log(customVar); // \"a custom variable\"\n        })\n    });\n});\n\nclient\n    .init()\n    .url('http://www.github.com')\n    .getUrlAndTitle('a custom variable', function(err,result){\n        assert.equal(null, err)\n        assert.strictEqual(result.url,'https://github.com/');\n        assert.strictEqual(result.title,'GitHub · Build software better, together.');\n    })\n    .end();\n```\n\n## Selenium cloud providers\n\nWebdriverIO supports\n\n* <img src=\"https://pbs.twimg.com/profile_images/794342508/Logo_Square_bigger.png\" width=\"48\" /> [Sauce Labs](https://saucelabs.com/)\n* <img src=\"https://avatars0.githubusercontent.com/u/1119453?v=3&s=200\" width=\"48\" /> [BrowserStack](http://www.browserstack.com/)\n* <img src=\"https://pbs.twimg.com/profile_images/1647337797/testingbot1_bigger.png\" width=\"48\" /> [TestingBot](https://testingbot.com/)\n\nSee the corresponding [examples](examples/).\n\n## How to run tests\n\n1. Download the latest Selenium [standalone server](http://selenium-release.storage.googleapis.com/index.html)\n   and run it via\n\n   ```sh\n   $ java -jar selenium-server-standalone-2.41.0.jar\n   ```\n\n2. Make sure you have all the dependencies installed\n\n   ```sh\n   $ npm install\n   ```\n\n   also all Bower packages required by our testpage\n\n   ```sh\n   $ cd test/site/www && bower install && cd ../../..\n   ```\n\n3. Start a local server that delivers our test page to the browser. We recommend to\n   use [http-server](https://www.npmjs.org/package/http-server)\n\n   ```sh\n   $ cd /root/dir/of/webdriverio\n   $ http-server -p 8080\n   ```\n\n4. Depending on your feature/fix/patch make sure it gets covered by a test.\n   To ensure that you can run one of the following commands:\n\n   ```sh\n   # if your patch is browser specific\n   # (e.g. upload files)\n   npm run-script test-desktop\n\n   # if your patch is mobile specific\n   # (e.g. flick or swipe tests)\n   npm run-script test-mobile\n\n   # if your patch is functional and hasn't something to do with Selenium\n   # (e.g. library specific fixes like changes within EventHandler.js)\n   npm run-script test-functional\n   ```\n\n   While developing you can run tests on specific specs by passing another\n   environment variable `_SPEC`, e.g.\n\n   ```sh\n   $ _SPEC=test/spec/YOURSPEC.js npm run-script test-desktop\n   ```\n\n## NPM Maintainers\n\nThe npm module for this library is maintained by:\n\n* [Camilo Tapia](http://github.com/Camme)\n* [Dan Jenkins](http://github.com/danjenkins)\n* [Christian Bromann](https://github.com/christian-bromann)\n* [Vincent Voyer](https://github.com/vvo)\n",
  "readmeFilename": "README.md",
  "_id": "webdriverio@2.4.0",
  "_from": "webdriverio@^2.3.0"
}
